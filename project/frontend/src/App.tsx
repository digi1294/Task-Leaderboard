import React, { useState, useEffect } from 'react';
import { Header } from './components/Header';
import { StatsBar } from './components/StatsBar';
import { TopPerformers } from './components/TopPerformers';
import { Sidebar } from './components/Sidebar';
import { TimeOverlay } from './components/TimeOverlay';
import { useAutoRefresh } from './hooks/useAutoRefresh';
import { useTimeControl } from './hooks/useTimeControl';
import { useAudio } from './hooks/useAudio';
import { useLeaderboardData } from './hooks/useLeaderboardData';

function App() {
Â  const [previousTimeMode, setPreviousTimeMode] = useState<string>('normal');
Â  
Â  const { countdown } = useAutoRefresh(300);
Â  const { timeMode, currentTime } = useTimeControl();
  // --- THIS IS THE CHANGE (Part 1) ---
  // We get the new 'playNewLeaderChime' function from our audio hook.
Â  const { playWelcomeChime, playFocusChime, playLunchJingle, playEndDayFade, playNewLeaderChime } = useAudio();
  // We also get the new 'soundTrigger' from our data hook.
Â  const { performers, stats, trendData, soundTrigger, isLoading, error } = useLeaderboardData();

  // This useEffect handles the TIME-BASED sounds (lunch, end of day, etc.)
Â  useEffect(() => {
Â  Â  if (timeMode !== previousTimeMode) {
Â  Â  Â  switch (timeMode) {
Â  Â  Â  Â  case 'morning': playWelcomeChime(); break;
Â  Â  Â  Â  case 'focus': playFocusChime(); break;
Â  Â  Â  Â  case 'lunch': playLunchJingle(); break;
Â  Â  Â  Â  case 'endday': playEndDayFade(); break;
Â  Â  Â  }
Â  Â  Â  setPreviousTimeMode(timeMode);
Â  Â  }
Â  }, [timeMode, previousTimeMode, playWelcomeChime, playFocusChime, playLunchJingle, playEndDayFade]);

  // --- THIS IS THE CHANGE (Part 2) ---
  // This new useEffect handles the DATA-BASED sounds (new leader).
  useEffect(() => {
    // We check if the trigger exists before trying to play a sound.
    if (soundTrigger) {
        // We check the name of the trigger (removing the random number we added).
        if (soundTrigger.startsWith('new_leader')) {
            playNewLeaderChime();
        }
        // Add more 'if' statements here for other sound triggers in the future.
    }
  }, [soundTrigger, playNewLeaderChime]); // This effect runs only when the soundTrigger changes.

Â  if (timeMode === 'lunch' || timeMode === 'endday') {
Â  Â  return <TimeOverlay mode={timeMode} currentTime={currentTime} />;
Â  }

Â  if (isLoading) {
Â  Â  return (
Â  Â  Â  <div className="h-screen bg-slate-950 flex items-center justify-center">
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-400 mx-auto mb-4"></div>
Â  Â  Â  Â  Â  <p className="text-white text-lg">Loading leaderboard data...</p>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (error) {
Â  Â  return (
Â  Â  Â  <div className="h-screen bg-slate-950 flex items-center justify-center">
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <p className="text-red-400 text-lg mb-2">Error loading data</p>
Â  Â  Â  Â  Â  <p className="text-slate-400">{error}</p>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  return (
Â  Â  <div className="h-screen bg-slate-950 text-white flex flex-col">
Â  Â  Â  <Header
Â  Â  Â  Â  currentTime={currentTime}
Â  Â  Â  Â  refreshCountdown={countdown}
Â  Â  Â  />

Â  Â  Â  {timeMode === 'focus' && (
Â  Â  Â  Â  <div className="bg-gradient-to-r from-purple-600 to-indigo-600 text-center py-2 text-sm font-semibold animate-pulse flex items-center justify-center gap-x-3">
Â  Â  Â  Â  Â  <span>âœ¨</span>
Â  Â  Â  Â  Â  <span>Focus Time - Deep Work Mode Active</span>
Â  Â  Â  Â  Â  <span>âœ¨</span>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  <StatsBar stats={stats!} />

Â  Â  Â  <div className="flex-1 flex gap-3 p-3 overflow-y-auto">
Â  Â  Â  Â  <div className="flex-1 flex flex-col">
Â  Â  Â  Â  Â  <TopPerformers performers={performers} />
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="w-64 flex-shrink-0">
Â  Â  Â  Â  Â  <Sidebar
Â  Â  Â  Â  Â  Â  doerOfTheWeek={{
Â  Â  Â  Â  Â  Â  Â  name: performers[0]?.name || 'Loading...',
Â  Â  Â  Â  Â  Â  Â  score: performers[0]?.score || 0,
Â  Â  Â  Â  Â  Â  Â  badges: []
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  overdueSpotlight={{
Â  Â  Â  Â  Â  Â  Â  count: stats?.overdue || 0,
Â  Â  Â  Â  Â  Â  Â  names: performers.filter(p => p.overdue > 0).map(p => p.name)
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  trendData={trendData}
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  <div className="bg-slate-900 border-t border-slate-700 py-2">
Â  Â  Â  Â  <div className="px-4 text-center">
Â  Â  Â  Â  Â  <p className="text-slate-400 text-sm">
Â  Â  Â  Â  Â  Â  ðŸš€ Powered By Your Trust â€¢ Next refresh in {countdown}s
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
}

export default App;
